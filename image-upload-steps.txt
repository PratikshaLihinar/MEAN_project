
//view documentation its solve error - https://github.com/expressjs/multer
// 1.install multer - npm i --save multer
//2. import it - const multer = require("multer"); 
//declare MIME_TYPE_MAP -const MIME_TYPE_MAP ={
    'image/png': 'png',
    'image.jpeg': 'jpeg',
    'image.jpg': 'jpg'
};
//3. storage -
const storage= multer.diskStorage({ 
    destination: (req, file, cb) =>{
        const isValid = MIME_TYPE_MAP[file.mimetype];
        let error = Error("Invalid mime type");
        if(isValid){
            error = null;
        }
        cb(error, "backend/images");
    },
    filename: (req, file, cb) =>{
        const name = file.originalname.toLocaleLowerCase().split(" ").join('_');
        const ext = MIME_TYPE_MAP[file.mimetype];
        cb(null, name+'_'+Date.now() + '.'+ext);
    }
});
//4 upload
const upload = multer({ storage: storage });

//5. call in url & save

router.post("", upload.single("image"),(req, res, next)=>{
    const post = new Post({
       
        title: req.body.title,
        content: req.body.content
    });
    // console.log(post);
    post.save().then(createdPost => {
        // console.log(result);
        res.status(201).json({
            message: 'Post added successfully',
            postID: createdPost._id
        });
    });

6. add validator for file type in componet you need it & name it mime-type.vallidator.ts

import { AbstractControl } from "@angular/forms";
import { Observable, Observer, of } from "rxjs";

export const mimeType = (
  control: AbstractControl
): Promise<{ [key: string]: any }> | Observable<{ [key: string]: any }> => {
  if (typeof(control.value) === 'string') {
    return of(null);
  }
  const file = control.value as File;
  const fileReader = new FileReader();
  const frObs = Observable.create(
    (observer: Observer<{ [key: string]: any }>) => {
      fileReader.addEventListener("loadend", () => {
        const arr = new Uint8Array(fileReader.result as ArrayBuffer).subarray(0, 4);
        let header = "";
        let isValid = false;
        for (let i = 0; i < arr.length; i++) {
          header += arr[i].toString(16);
        }
        switch (header) {
          case "89504e47":
            isValid = true;
            break;
          case "ffd8ffe0":
          case "ffd8ffe1":
          case "ffd8ffe2":
          case "ffd8ffe3":
          case "ffd8ffe8":
            isValid = true;
            break;
          default:
            isValid = false; // Or you can use the blob.type as fallback
            break;
        }
        if (isValid) {
          observer.next(null);
        } else {
          observer.next({ invalidMimeType: true });
        }
        observer.complete();
      });
      fileReader.readAsArrayBuffer(file);
    }
  );
  return frObs;
};
